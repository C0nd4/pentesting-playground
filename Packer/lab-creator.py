#!/usr/bin/env python3

from tkinter import *

class Window(Frame):


	def __init__(self, master=None):
		Frame.__init__(self, master)                 
		self.master = master
		self.creation_window()
		self.currentOS = "Ubuntu 18.04"
		self.currentRoles = ubuntu1804Roles
		self.currentMachine = machineList[0]

    #Creation of init_window
	def creation_window(self):

		self.master.title("Lab Creator")
		self.pack(fill=BOTH, expand=1)


		self.selectedOS = StringVar(self)
		self.selectedOS.set(osList[0])
		self.selectedOS.trace('w', self.set_current_os)
		self.osOpt = OptionMenu(self, self.selectedOS, *osList, command=self.set_current_os)
		self.osOpt.config(width=12, font=('Helvetica', 12))
		self.osOpt.pack()
		self.osOpt.place(x=235, y=15)

		self.selectedMachine = StringVar(self)
		self.selectedMachine.set(machineList[0])
		self.selectedMachine.trace('w', self.set_current_machine)
		self.machineOpt = OptionMenu(self, self.selectedMachine, *machineList, command=self.set_current_machine)
		self.machineOpt.config(width=12, font=('Helvetica', 12))
		self.machineOpt.pack()
		self.machineOpt.place(x=15, y=15)



		self.roleLabel = Label(self, text="Roles:", font=('Helvetica', 12))
		self.roleLabel.pack()
		self.roleLabel.place(x=15, y=80)

		

		self.saveButton = Button(self, text="Save", font=('Helvetica', 12), command=self.save)
		self.saveButton.place(x=315, y=250)

		self.addMachineButton = Button(self, text="Add Machine", font=('Helvetica', 12), command=self.add_machine)
		self.addMachineButton.place(x=15, y=250)

#		print(self.currentMachine)
		self.roleList = Listbox(self, selectmode="multiple", width=50)
		self.roleList.pack()
		self.roleList.place(x=75, y=75)

		self.currentOS = self.set_current_os()
		self.currentRoles = self.get_roles()
		self.currentMachine = self.set_current_machine()

#	def option_select(self, *args):
#		print(self.selectedMachine.get())

	def add_machine(self):
		global numberOfMachines
		numberOfMachines = numberOfMachines + 1
#		newMachine = "Machine " + str(numberOfMachines)
#		machineList.append(newMachine)
		newMachine = Machine(numberOfMachines)
		machineList.append(newMachine)
#		for i in machineList:
#			print(str(i))
		m = self.machineOpt.children['menu']
		m.delete(0, "end")
		for mach in machineList:
			m.add_command(label=mach, command=lambda value=mach: self.selectedMachine.set(value))
#		self.selectedOS.set(osList[0])


	def set_current_machine(self, *args):
		for m in machineList:
			if str(m) == self.selectedMachine.get():
				self.currentMachine = m
		self.roleList.selection_clear(0, END)
		print("current " + str(self.currentMachine))
		self.populate_machine()



	def set_current_os(self, *args):
		for o in osList:
			if str(o) == str(self.selectedOS.get()):
				self.currentOS = o
		print("current " + str(self.currentOS))
		self.get_roles()
		self.show_roles()

		


	def get_roles(self):
		print("called " + str(self.selectedOS.get()))
		#self.currentOS = self.set_current_os()
		if self.selectedOS.get() == "Ubuntu 18.04":
			self.currentRoles = ubuntu1804Roles
		elif self.selectedOS.get() == "Kali":
			self.currentRoles = kaliRoles
		elif self.selectedOS.get() == "CentOS 7":
			self.currentRoles = centos7Roles

	def show_roles(self):
		self.roleList.delete(0, END)
		if self.currentRoles != None:
			for r in self.currentRoles:
				self.roleList.insert(END, r)


	def save(self):
		selected = self.roleList.curselection()
		self.currentMachine.roles = []
		for s in selected:
			print(str(s))
			self.currentMachine.roles.append(s)
		self.currentMachine.operatingSystem = self.currentOS
		self.currentMachine.roleSet = self.currentRoles
		print(str(self.currentOS))

	def populate_machine(self):
		if self.currentMachine.operatingSystem != "":
			self.selectedOS.set(self.currentMachine.operatingSystem)
		else: 
			self.selectedOS.set("Select an OS")
			self.currentRoles = None
		self.show_roles()
		for a in self.currentMachine.roles:
			self.roleList.select_set(a)
			print("TEST: " + str(a))


class Machine():
	def __init__(self, num):
		self.number = num
		self.name = ""
		self.roles = []
		self.operatingSystem = ""
		self.ram = 0
		self.cpus = 0
		self.roleSet = None
	def __str__(self):
		return "Machine " + str(self.number)


def main():
	root = Tk()
	root.geometry("400x300")
	app = Window(root)
	app.mainloop()


if __name__ == '__main__':
	osList = ["Ubuntu 18.04", "Kali", "CentOS 7"]
	ubuntu1804Roles = ["Apache", "NFS"]
	centos7Roles = ["Apache"]
	kaliRoles = []
	machineList = []
	machineList.append(Machine(1))
	numberOfMachines = 1
	main()


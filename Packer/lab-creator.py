#!/usr/bin/env python3

import os
import subprocess
from tkinter import *

class Window(Frame):


	def __init__(self, master=None):
		Frame.__init__(self, master)                 
		self.master = master
		self.creation_window()
		self.currentOS = "Ubuntu 18.04"
		self.currentRoles = ubuntu1804Roles
		self.currentMachine = machineList[0]

	def creation_window(self):

		self.master.title("Lab Creator")
		self.pack(fill=BOTH, expand=1)


		self.selectedOS = StringVar(self)
		self.selectedOS.set(osList[0])
		self.selectedOS.trace('w', self.set_current_os)
		self.osOpt = OptionMenu(self, self.selectedOS, *osList, command=self.set_current_os)
		self.osOpt.config(width=12, font=('Helvetica', 12))
		self.osOpt.pack()
		self.osOpt.place(x=235, y=15)

		self.selectedMachine = StringVar(self)
		self.selectedMachine.set(machineList[0])
		self.selectedMachine.trace('w', self.set_current_machine)
		self.machineOpt = OptionMenu(self, self.selectedMachine, *machineList, command=self.set_current_machine)
		self.machineOpt.config(width=12, font=('Helvetica', 12))
		self.machineOpt.pack()
		self.machineOpt.place(x=15, y=15)

		self.roleLabel = Label(self, text="Roles:", font=('Helvetica', 12))
		self.roleLabel.pack()
		self.roleLabel.place(x=15, y=80)

		self.saveButton = Button(self, text="Save", font=('Helvetica', 12), command=self.save)
		self.saveButton.place(x=315, y=250)

		self.runButton = Button(self, text="Run", font=('Helvetica', 12), command=self.run_packer)
		self.runButton.place(x=200, y=250)

		self.addMachineButton = Button(self, text="Add Machine", font=('Helvetica', 12), command=self.add_machine)
		self.addMachineButton.place(x=15, y=250)

		self.roleList = Listbox(self, selectmode="multiple", width=25, exportselection=0)
		self.roleList.pack()
		self.roleList.place(x=75, y=75)

		self.cpuEntry = Entry(self, width=7)
		self.cpuEntry.pack()
		self.cpuEntry.place(x=350, y=75)

		self.cpuLabel = Label(self, text="CPU Cores:", font=('Helvetica', 12))
		self.cpuLabel.pack()
		self.cpuLabel.place(x=230, y=72)

		self.ramEntry = Entry(self, width=7)
		self.ramEntry.pack()
		self.ramEntry.place(x=350, y=100)

		self.ramLabel = Label(self, text="RAM (MBs):", font=('Helvetica', 12))
		self.ramLabel.pack()
		self.ramLabel.place(x=230, y=97)

		self.hdEntry = Entry(self, width=7)
		self.hdEntry.pack()
		self.hdEntry.place(x=350, y=125)

		self.hdLabel = Label(self, text="HD Size (MBs):", font=('Helvetica', 12))
		self.hdLabel.pack()
		self.hdLabel.place(x=230, y=122)

		self.currentOS = self.set_current_os()
		self.currentRoles = self.get_roles()
		self.currentMachine = self.set_current_machine()


	def add_machine(self):
		global numberOfMachines
		numberOfMachines = numberOfMachines + 1
		newMachine = Machine(numberOfMachines)
		machineList.append(newMachine)
		m = self.machineOpt.children['menu']
		m.delete(0, "end")
		for mach in machineList:
			m.add_command(label=mach, command=lambda value=mach: self.selectedMachine.set(value))


	def set_current_machine(self, *args):
		for m in machineList:
			if str(m) == self.selectedMachine.get():
				self.currentMachine = m
		self.roleList.selection_clear(0, END)
		print("current " + str(self.currentMachine))
		self.populate_machine()



	def set_current_os(self, *args):
		for o in osList:
			if str(o) == str(self.selectedOS.get()):
				self.currentOS = o
		print("current " + str(self.currentOS))
		self.get_roles()
		self.show_roles()


	def get_roles(self):
		print("called " + str(self.selectedOS.get()))
		if self.selectedOS.get() == "Ubuntu 18.04":
			self.currentRoles = ubuntu1804Roles
		elif self.selectedOS.get() == "Kali":
			self.currentRoles = kaliRoles
		elif self.selectedOS.get() == "CentOS 7":
			self.currentRoles = centos7Roles

	def show_roles(self):
		self.roleList.delete(0, END)
		if self.currentRoles != None:
			for r in self.currentRoles:
				self.roleList.insert(END, r)


	def save(self):
		selected = self.roleList.curselection()
		self.currentMachine.roles = []
		for s in selected:
			print(str(s))
			self.currentMachine.roles.append(s)
		self.currentMachine.operatingSystem = self.currentOS
		self.currentMachine.roleSet = self.currentRoles
		self.currentMachine.cpus = self.cpuEntry.get()
		self.currentMachine.hdSize = self.hdEntry.get()
		self.currentMachine.ram = self.ramEntry.get()
		print(str(self.currentOS))

	def populate_machine(self):
		if self.currentMachine.operatingSystem != "":
			self.selectedOS.set(self.currentMachine.operatingSystem)
		else: 
			self.selectedOS.set("Select an OS")
			self.currentRoles = None
		self.show_roles()
		for a in self.currentMachine.roles:
			self.roleList.select_set(a)
			print("TEST: " + str(a))
		self.ramEntry.delete(0, END)
		self.cpuEntry.delete(0, END)
		self.hdEntry.delete(0, END)
		self.ramEntry.insert(0, self.currentMachine.ram)
		self.cpuEntry.insert(0, self.currentMachine.cpus)
		self.hdEntry.insert(0, self.currentMachine.hdSize)

	def run_packer(self):
		for m in machineList:
			print(m.operatingSystem)
			with open("machine" + str(m.number) + ".json", "w") as packerFile:
				packerFile.write("{")
				if len(m.roles) != 0:
					print("has roles")
				if "Ubuntu" in m.operatingSystem:
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(+m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"Machine"+str(m.number)+"\",\"guest_os_type\":\"Ubuntu_64\",\"type\":\"virtualbox-iso\",\"cpus\":\""+str(m.cpus)+"\",\"memory\":\""+str(m.ram)+"\",\"disk_size\":\""+str(m.hdSize)+"\",\"iso_checksum_type\":\"sha256\",\"iso_checksum\":\"b4667b8f6d863271a014855d0f55b365f956bcdf8c691c8a3741b60d905e9647\",\"iso_urls\":[\"http/ubuntu18-mini.iso\",\"http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso\"],\"ssh_username\":\"conda\",\"ssh_password\":\"conda\",\"ssh_wait_timeout\":\"60m\",\"headless\":\"false\",\"shutdown_command\":\"echo'conda'|sudo -S shutdown -P now\",\"http_directory\":\"http\",\"boot_wait\":\"5s\",\"boot_command\":[\"<tab>\",\"url=http://{{.HTTPIP}}:{{.HTTPPort}}/ubuntu-preseed.cfg \",\"auto=true \",\"initrd=initrd.gz \",\"hostname=ubuntu \",\"<enter>\"]}]}")
				elif "Kali" in m.operatingSystem:
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"Machine"+str(m.number)+"\",\"guest_os_type\":\"Debian_64\",\"type\":\"virtualbox-iso\",\"cpus\":\""+str(m.cpus)+"\",\"memory\":\""+str(m.ram)+"\",\"disk_size\":\""+str(m.hdSize)+"\",\"iso_checksum_type\":\"sha256\",\"iso_checksum\":\"e399fa5f4aa087218701aff513cc4cfda332e1fbd0d7c895df57c24cd5510be3\",\"iso_urls\":[\"http/kali.iso\",\"https://archive.kali.org/kali-images/current/kali-linux-2020.1-installer-amd64.iso\"],\"ssh_username\":\"root\",\"ssh_password\":\"toor\",\"ssh_wait_timeout\":\"60m\",\"headless\":\"false\",\"shutdown_command\":\"shutdown -P now\",\"http_directory\":\"http\",\"boot_wait\":\"5s\",\"boot_command\":[\"<esc><wait>\",\"install \",\"preseed/url=http://{{.HTTPIP}}:{{.HTTPPort}}/kali.cfg \",\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us <wait>\",\"netcfg/get_hostname=kali \",\"netcfg/get_domain=unassigned-domain \",\"fb=falsedebconf/frontend=noninteractive \",\"console-setup/ask_detect=false <wait>\",\"console-keymaps-at/keymap=us \",\"keyboard-configuration/xkb-keymap=us <wait>\",\"<enter><wait10><wait10><wait10>\",\"<enter><wait>\"]}]}")
				packerFile.close()
				os.system("packer build machine" + str(m.number) + ".json")
#				subprocess.Popen("packer build machine" + str(m.number) + ".json", shell=True, stdout = subprocess.PIPE).communicate()[0].strip()
		self.cleanup()

	def cleanup(self):
		for m in machineList:
			os.remove("machine" + str(m.number) + ".json")



class Machine():
	def __init__(self, num):
		self.number = num
		self.name = ""
		self.roles = []
		self.operatingSystem = ""
		self.ram = 0
		self.cpus = 0
		self.roleSet = None
		self.hdSize = 0
		self.status = False
	def __str__(self):
		return "Machine " + str(self.number)


def main():
	root = Tk()
	root.geometry("400x300")
	app = Window(root)
	app.mainloop()


if __name__ == '__main__':
	osList = ["Ubuntu 18.04", "Kali", "CentOS 7"]
	ubuntu1804Roles = ["Apache", "NFS"]
	centos7Roles = ["Apache"]
	kaliRoles = []
	machineList = []
	machineList.append(Machine(1))
	numberOfMachines = 1
	main()


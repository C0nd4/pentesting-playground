#!/usr/bin/env python3

import os
import subprocess
import threading
import queue
from tkinter import *

def switch_frame(self, frame_class):
		new_frame = frame_class(self.master)
		new_frame.setQueue(self.queue)
		if self is not None:
			self.destroy()
		self = new_frame
		self.pack(fill=BOTH, expand=1)

class LabCreatorApp(Frame):
	def __init__(self, master=None):
		Frame.__init__(self, master)                 
		self.master = master
		self._frame = None
		self.queue = queue.Queue()
		switch_frame(self, MainPage)
		

class MainPage(Frame):

	def __init__(self, master=None):
		Frame.__init__(self, master)                 
		self.master = master
		self.creation_window()
		self.currentOS = osList[0]
		self.currentRoles = osList[0].roleList
		self.currentMachine = machineList[0]

	def creation_window(self):

		self.master.title("Lab Creator")
		self.pack(fill=BOTH, expand=1)

		self.selectedOS = StringVar(self)
		self.selectedOS.set(osList[0])
		self.selectedOS.trace('w', self.set_current_os)
		self.osOpt = OptionMenu(self, self.selectedOS, *osList, command=self.set_current_os)
		self.osOpt.config(width=12, font=('Helvetica', 12))
		self.osOpt.pack()
		self.osOpt.place(x=235, y=15)

		self.selectedMachine = StringVar(self)
		self.selectedMachine.set(machineList[0])
		self.selectedMachine.trace('w', self.set_current_machine)
		self.machineOpt = OptionMenu(self, self.selectedMachine, *machineList, command=self.set_current_machine)
		self.machineOpt.config(width=12, font=('Helvetica', 12))
		self.machineOpt.pack()
		self.machineOpt.place(x=15, y=15)

		self.roleLabel = Label(self, text="Roles:", font=('Helvetica', 12))
		self.roleLabel.pack()
		self.roleLabel.place(x=15, y=80)

		self.saveButton = Button(self, text="Save", font=('Helvetica', 12), command=self.save)
		self.saveButton.place(x=315, y=250)

		self.runButton = Button(self, text="Run", font=('Helvetica', 12), command=self.run_packer)
		self.runButton.place(x=200, y=250)

		self.addMachineButton = Button(self, text="Add Machine", font=('Helvetica', 12), command=self.add_machine)
		self.addMachineButton.place(x=15, y=250)

		self.roleList = Listbox(self, selectmode="multiple", width=25, exportselection=0)
		self.roleList.pack()
		self.roleList.place(x=75, y=75)

		self.cpuEntry = Entry(self, width=7)
		self.cpuEntry.pack()
		self.cpuEntry.place(x=350, y=75)

		self.cpuLabel = Label(self, text="CPU Cores:", font=('Helvetica', 12))
		self.cpuLabel.pack()
		self.cpuLabel.place(x=230, y=72)

		self.ramEntry = Entry(self, width=7)
		self.ramEntry.pack()
		self.ramEntry.place(x=350, y=100)

		self.ramLabel = Label(self, text="RAM (MBs):", font=('Helvetica', 12))
		self.ramLabel.pack()
		self.ramLabel.place(x=230, y=97)

		self.hdEntry = Entry(self, width=7)
		self.hdEntry.pack()
		self.hdEntry.place(x=350, y=125)

		self.hdLabel = Label(self, text="HD Size (MBs):", font=('Helvetica', 12))
		self.hdLabel.pack()
		self.hdLabel.place(x=230, y=122)

		self.currentOS = self.set_current_os()
		self.currentRoles = self.get_roles()
		self.currentMachine = self.set_current_machine()

	def add_machine(self):
		global numberOfMachines
		numberOfMachines = numberOfMachines + 1
		newMachine = Machine(numberOfMachines)
		machineList.append(newMachine)
		m = self.machineOpt.children['menu']
		m.delete(0, "end")
		for mach in machineList:
			m.add_command(label=mach, command=lambda value=mach: self.selectedMachine.set(value))

	def set_current_machine(self, *args):
		for m in machineList:
			if str(m) == self.selectedMachine.get():
				self.currentMachine = m
		self.roleList.selection_clear(0, END)
		self.populate_machine()

	def set_current_os(self, *args):
		for o in osList:
			if str(o) == str(self.selectedOS.get()):
				self.currentOS = o
		self.get_roles()
		self.show_roles()

	def get_roles(self):
		if(self.currentOS):
			self.currentRoles = self.currentOS.roleList

	def show_roles(self):
		self.roleList.delete(0, END)
		if self.currentRoles != None:
			for r in self.currentRoles:
				self.roleList.insert(END, r)
			for s in self.currentOS.scriptList:
				self.roleList.insert(END, s)

	def save(self):
		selected = self.roleList.curselection()
		selected = [self.roleList.get(i) for i in selected]
		self.currentMachine.operatingSystem = self.currentOS
		for s in selected:
			if s in self.currentMachine.operatingSystem.roleList:
				self.currentMachine.roles.append(s)
				print(s + " added to roles")
			else:
				self.currentMachine.scripts.append(s)
				print(s + " added to scripts")
		self.currentMachine.roleSet = self.currentRoles
		self.currentMachine.cpus = self.cpuEntry.get()
		self.currentMachine.hdSize = self.hdEntry.get()
		self.currentMachine.ram = self.ramEntry.get()

	def populate_machine(self):
		if self.currentMachine.operatingSystem != "":
			self.selectedOS.set(self.currentMachine.operatingSystem)
		else: 
			self.selectedOS.set("Select an OS")
			self.currentRoles = None
		self.show_roles()
		for a in self.currentMachine.roles:
			self.roleList.select_set(a)
		self.ramEntry.delete(0, END)
		self.cpuEntry.delete(0, END)
		self.hdEntry.delete(0, END)
		self.ramEntry.insert(0, self.currentMachine.ram)
		self.cpuEntry.insert(0, self.currentMachine.cpus)
		self.hdEntry.insert(0, self.currentMachine.hdSize)

	def run_packer(self):
		ThreadedTask(self.queue).start()
		switch_frame(self, ProgressPage)

	def setQueue(self, queue):
		self.queue = queue


class ProgressPage(Frame):
	def __init__(self, master):
		Frame.__init__(self, master)                 
		self.master = master
		self.numberOfFinished = -1
		self.status = self.update()
		self.l = Label(self, text="Progress", font=('Helvetica', 18, "bold")).pack()
		for i in range (len(machineList)):
			newLabel = Label(self, text="Machine " + str(i+1) + ":", font=('Helvetica', 12))
			newLabel.pack()
			newLabel.place(x=60, y=22 * (i + 1) + 30)
		self.statusList = []
		for i in range (len(machineList)):
			self.statusList.append(Label(self, text="In Progress", font=('Helvetica', 12)))
			self.statusList[i].pack()
			self.statusList[i].place(x=150, y=22 * (i + 1) + 30)

	def setQueue(self, queue):
		self.queue = queue

	def update(self):
		self.after(10000, self.update)
		try:
			if not self.queue.empty():
				buildStatus = str(self.queue.get())
				self.numberOfFinished = self.numberOfFinished + 1
				self.statusList[self.numberOfFinished].destroy()
				self.statusList[self.numberOfFinished] = Label(self, text=buildStatus, font=('Helvetica', 12))
				self.statusList[self.numberOfFinished].pack()
				self.statusList[self.numberOfFinished].place(x=150, y=22 * (self.numberOfFinished + 1) + 30)
		except:
			pass


class ThreadedTask(threading.Thread):

	def __init__(self, queue):
		threading.Thread.__init__(self)
		self.queue = queue

	def cleanup(self):
		for m in machineList:
			os.remove("Packer/machine" + str(m.number) + ".json")
			if len(m.roles) != 0:
					os.remove("Packer/ansible/machine" + str(m.number) + ".yml")

	def writeVagrantFiles(self):
		machineListTemp = machineList
		for m in machineListTemp:
			if len(m.scripts) != 0:
				for s in m.scripts:
					if s == "Domain Controller":
						machineList.insert(0, machineList.pop(machineList.index(m)))
		with open("Vagrant/Vagrantfile", "w") as vagrantFile:
			vagrantFile.write('# -*- mode: ruby -*-\n')
			vagrantFile.write('# vi: set ft=ruby :\n')
			vagrantFile.write('Vagrant.configure("2") do |config|\n')
			vagrantFile.write('  config.ssh.username = "conda"\n')
			vagrantFile.write('  config.ssh.password = "conda"\n')
			vagrantFile.write('  config.winrm.username = "Administrator"\n')
			vagrantFile.write('  config.winrm.password = "Conda123!"\n')
			vagrantFile.write('  config.winrm.transport = :plaintext\n')
			vagrantFile.write('  config.winrm.basic_auth_only = true\n')
			for m in machineList:
				vagrantFile.write('  config.vm.define "machine' + str(m.number) + '" do |machine' + str(m.number) + '|\n')
				if "Windows" in str(m.operatingSystem):
					vagrantFile.write('    machine' + str(m.number) + '.vm.network "forwarded_port", guest: 3389, host: ' + str(33389 + m.number) + '\n')
					vagrantFile.write('    machine' + str(m.number) + '.vm.communicator = "winrm"\n')
					vagrantFile.write('    machine' + str(m.number) + '.vm.provision "shell", inline: "New-Item -Path C:\\ -Name Temp -ItemType directory"\n')
				vagrantFile.write('    machine' + str(m.number) + '.vm.box = "../VMs/Machine' + str(m.number) + '.box"\n')
				vagrantFile.write('    machine' + str(m.number) + '.vm.network "private_network", ip: "192.168.13.' + str(100 + m.number) + '"\n')
				if len(m.scripts) != 0:
					for s in m.scripts:
						if s == "Domain Controller":
							vagrantFile.write('    machine' + str(m.number) + '.vm.provision "file", source: "scripts/DeploymentConfigTemplate.xml", destination: "C:\\\\Temp\\\\DeploymentConfigTemplate.xml"\n')
							vagrantFile.write('    machine' + str(m.number) + '.vm.provision "shell", path: "scripts/' + str(s) + '.ps1"\n')
							vagrantFile.write('    machine' + str(m.number) + '.vm.provision "reload"\n')
							vagrantFile.write('    machine' + str(m.number) + '.vm.provision "shell", reboot: true\n')
						else:
							vagrantFile.write('    machine' + str(m.number) + '.vm.provision "shell", path: "scripts/' + str(s) + '.ps1"\n')
				vagrantFile.write('   end\n')
			vagrantFile.write("end")


	def run(self):
		self.writeVagrantFiles()
		for m in machineList:
			with open("Packer/machine" + str(m.number) + ".json", "w") as packerFile:
				packerFile.write("{")
				if len(m.roles) != 0 and m.operatingSystem.usesAnsible:
					packerFile.write("\"provisioners\": [{\"type\": \"ansible-local\",\"playbook_dir\": \"Packer/ansible\",\"playbook_file\": \"Packer/ansible/machine" + str(m.number) + ".yml\"}],")
					with open("Packer/ansible/machine" + str(m.number) + ".yml", "w") as ansibleFile:
						ansibleFile.write("---\n- name: \"Provision Machine " + str(m.number) + "\"\n  hosts: all\n  roles:")
						for r in m.roles:
							ansibleFile.write("\n   - " + r.lower())
						ansibleFile.close()
				if "Ubuntu" in str(m.operatingSystem):
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"VMs/machine"+str(m.number)+"\",\"guest_os_type\":\"Ubuntu_64\",\"type\":\"virtualbox-iso\",\"cpus\":\""+str(m.cpus)+"\",\"memory\":\""+str(m.ram)+"\",\"disk_size\":\""+str(m.hdSize)+"\",\"iso_checksum\":\"sha256:b4667b8f6d863271a014855d0f55b365f956bcdf8c691c8a3741b60d905e9647\",\"iso_urls\":[\"Packer/http/ubuntu18.iso\",\"http://archive.ubuntu.com/ubuntu/dists/bionic-updates/main/installer-amd64/current/images/netboot/mini.iso\"],\"ssh_username\":\"conda\",\"ssh_password\":\"conda\",\"ssh_wait_timeout\":\"60m\",\"headless\":\"false\",\"shutdown_command\":\"sudo shutdown -P now\",\"http_directory\":\"Packer/http\",\"boot_wait\":\"5s\",\"boot_command\":[\"<tab>\",\"url=http://{{.HTTPIP}}:{{.HTTPPort}}/ubuntu-preseed.cfg \",\"auto=true \",\"initrd=initrd.gz \",\"hostname=ubuntu \",\"<enter>\"]}],\"post-processors\": [{\"type\": \"vagrant\",\"output\": \"VMs/" + "Machine" + str(m.number) + ".box\"}]}")
				elif "Kali" in str(m.operatingSystem):
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"VMs/machine"+str(m.number)+"\",\"guest_os_type\":\"Debian_64\",\"type\":\"virtualbox-iso\",\"cpus\":\""+str(m.cpus)+"\",\"memory\":\""+str(m.ram)+"\",\"disk_size\":\""+str(m.hdSize)+"\",\"iso_checksum\":\"sha256:4143128bd9cb1fb736b0171adc503aa026ed92ad3a0a9bc6dea8f559a83c36b1\",\"iso_urls\":[\"Packer/http/kali.iso\",\"https://archive.kali.org/kali-images/kali-2020.1b/kali-linux-2020.1b-installer-amd64.iso\"],\"ssh_username\":\"root\",\"ssh_password\":\"toor\",\"ssh_wait_timeout\":\"60m\",\"headless\":\"false\",\"shutdown_command\":\"shutdown -P now\",\"http_directory\":\"Packer/http\",\"boot_wait\":\"5s\",\"boot_command\":[\"<esc><wait>\",\"install \",\"preseed/url=http://{{.HTTPIP}}:{{.HTTPPort}}/kali.cfg \",\"debian-installer=en_US auto locale=en_US kbd-chooser/method=us <wait>\",\"netcfg/get_hostname=kali \",\"netcfg/get_domain=unassigned-domain \",\"fb=falsedebconf/frontend=noninteractive \",\"console-setup/ask_detect=false <wait>\",\"console-keymaps-at/keymap=us \",\"keyboard-configuration/xkb-keymap=us <wait>\",\"<enter><wait10><wait10><wait10>\",\"<enter><wait>\"]}],\"post-processors\": [{\"type\": \"vagrant\",\"output\": \"VMs/" + "Machine" + str(m.number) + ".box\"}]}")
				elif "CentOS" in str(m.operatingSystem):
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"VMs/machine"+str(m.number)+"\",\"guest_os_type\":\"RedHat_64\",\"type\":\"virtualbox-iso\",\"cpus\":\""+str(m.cpus)+"\",\"memory\":\""+str(m.ram)+"\",\"disk_size\":\""+str(m.hdSize)+"\",\"iso_checksum\":\"sha256:9a2c47d97b9975452f7d582264e9fc16d108ed8252ac6816239a3b58cef5c53d\",\"iso_urls\":[\"Packer/http/centos7.iso\",\"http://mirrors.usc.edu/pub/linux/distributions/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso\"],\"ssh_username\":\"conda\",\"ssh_password\":\"conda\",\"ssh_wait_timeout\":\"60m\",\"headless\":\"false\",\"shutdown_command\":\"sudo /usr/sbin/shutdown -P now\",\"http_directory\":\"Packer/http\",\"boot_wait\":\"5s\",\"boot_command\":[\"<tab>\",\" text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/centos.cfg \",\"auto=true \",\"initrd=initrd.img \",\"hostname=centos \",\"<enter>\"]}],\"post-processors\": [{\"type\": \"vagrant\",\"output\": \"VMs/" + "Machine" + str(m.number) + ".box\"}]}")
				elif "Windows 10" in str(m.operatingSystem):
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"VMs/machine"+str(m.number)+"\",\"guest_os_type\": \"Windows10_64\",\"type\": \"virtualbox-iso\",\"cpus\": \""+str(m.cpus)+"\",\"memory\": \""+str(m.ram)+"\",\"communicator\": \"winrm\",\"iso_checksum\": \"sha256:9ef81b6a101afd57b2dbfa44d5c8f7bc94ff45b51b82c5a1f9267ce2e63e9f53\",\"iso_urls\": [\"Packer/http/win-10.iso\",\"https://software-download.microsoft.com/download/pr/18363.418.191007-0143.19h2_release_svc_refresh_CLIENTENTERPRISEEVAL_OEMRET_x64FRE_en-us.iso\"],\"winrm_username\": \"conda\",\"winrm_password\": \"Conda123!\",\"winrm_timeout\": \"2h\",\"headless\": \"false\",\"shutdown_command\": \"shutdown /s\",\"disk_size\":\""+str(m.hdSize)+"\",\"format\": \"ova\",\"http_directory\": \"Packer/http\",\"floppy_files\": [\"Packer/floppy/10/autounattend.xml\",\"Packer/floppy/10/enable-winrm.bat\"]}],\"post-processors\": [{\"type\": \"vagrant\",\"output\": \"VMs/" + "Machine" + str(m.number) + ".box\"}]}")
				elif "Windows 2016" in str(m.operatingSystem):
					packerFile.write("\"builders\":[{\"name\":\"Machine"+str(m.number)+"\",\"vm_name\":\"Machine"+str(m.number)+"\",\"output_directory\":\"VMs/machine"+str(m.number)+"\",\"guest_os_type\": \"Windows2016_64\",\"type\": \"virtualbox-iso\",\"cpus\": \""+str(m.cpus)+"\",\"memory\": \""+str(m.ram)+"\",\"communicator\": \"winrm\",\"iso_checksum\": \"md5:70721288bbcdfe3239d8f8c0fae55f1f\",\"iso_urls\": [\"Packer/http/win-2016.iso\",\"https://software-download.microsoft.com/download/pr/Windows_Server_2016_Datacenter_EVAL_en-us_14393_refresh.ISO\"],\"winrm_username\": \"Administrator\",\"winrm_password\": \"Conda123!\",\"winrm_timeout\": \"2h\",\"headless\": \"false\",\"shutdown_command\": \"shutdown /s\",\"disk_size\":\""+str(m.hdSize)+"\",\"format\": \"ova\",\"http_directory\": \"Packer/http\",\"floppy_files\": [\"Packer/floppy/2016/autounattend.xml\",\"Packer/floppy/2016/enable-winrm.bat\"]}],\"post-processors\": [{\"type\": \"vagrant\",\"output\": \"VMs/" + "Machine" + str(m.number) + ".box\"}]}")
				packerFile.close()
#				os.system("packer build Packer/machine" + str(m.number) + ".json")
				child = subprocess.Popen("packer build Packer/machine" + str(m.number) + ".json", shell=True, stdout = subprocess.PIPE)
				childData = child.communicate()[0].strip()
				if child.returncode == 0:
					self.queue.put("Completed")
				else:
					self.queue.put("Failed")
		self.cleanup()

class Machine():

	def __init__(self, num):
		self.number = num
		self.name = ""
		self.roles = []
		self.scripts = []
		self.operatingSystem = ""
		self.ram = 0
		self.cpus = 0
		self.roleSet = None
		self.hdSize = 0
		self.status = False

	def __str__(self):
		return "Machine " + str(self.number)

class OperatingSystem():

	def __init__(self, name, roleList, scriptList, usesAnsible):
		self.name = name
		self.roleList = roleList
		self.usesAnsible = usesAnsible
		self.scriptList = scriptList

	def __str__(self):
		return self.name


def main():
	root = Tk()
	root.geometry("400x300")
	app = LabCreatorApp(root)
	app.mainloop()


if __name__ == '__main__':
	osList = []
	osList.append(OperatingSystem("Ubuntu 18.04", ["Graphical", "Apache"], [], True))
	osList.append(OperatingSystem("Kali", ["Apache"], [], True))
	osList.append(OperatingSystem("CentOS 7", ["Graphical", "Apache"], [], True))
	osList.append(OperatingSystem("Windows 10", [], ["Enable RDP"], False))
	osList.append(OperatingSystem("Windows 2016", [], ["Domain Controller","Enable RDP"], False))
	machineList = []
	machineList.append(Machine(1))
	numberOfMachines = 1
	main()

